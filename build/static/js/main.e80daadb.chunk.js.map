{"version":3,"sources":["index.js"],"names":["QUESTIONS","question","variants","CORRECT_ANSWER","RESULT","Question","props","i","item","className","map","index","key","disabled","type","value","name","checked","onChange","callback","Questions","changeArrAnswer","arr","state","answers","concat","setState","checkAllAnswers","isChecked","Array","length","fill","checkAnswer","correctAnswer","yourAnswer","questionElems","func","this","show","countCorrectAnswers","elemCheck","resultClass","percent","elemResult","onClick","React","Component","ReactDOM","render","document","getElementsByClassName"],"mappings":"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","file":"static/js/main.e80daadb.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\n\r\n// note: if you will add a new question wont forget add correct answer in array CORRECT_ANSWER.\r\nconst QUESTIONS = [\r\n  {\r\n    question: \"Самое большое космическое тело в солнечной системе?\",\r\n    variants: [\"Земля\", \"Луна\", \"Солнце\", \"Сатурн\"],\r\n  },\r\n  {\r\n    question: \"Планета, расположенная ближе всех к Солнцу?\",\r\n    variants: [\"Плутон\", \"Меркурий\", \"Венера\", \"Марс\"],\r\n  },\r\n  {\r\n    question: \"Бог войны в Древнем Риме?\",\r\n    variants: [\"Уран\", \"Нептун\", \"Марс\", \"Сатурн\"],\r\n  },\r\n  {\r\n    question: \"Приблизительная скорость света?\",\r\n    variants: [\"300000км/сек\", \"300000км/мин\", \"300км/сек\", \"30000км/час\"],\r\n  },\r\n  {\r\n    question: \"Плутон это планета?\",\r\n    variants: [\"Нет\", \"Да\"],\r\n  },\r\n  {\r\n    question: \"Планета, которая имеет самое внушительное кольцо?\",\r\n    variants: [\"Юпитер\", \"Уран\", \"Сатурн\", \"Нептун\"],\r\n  },\r\n  {\r\n    question: \"Планеты вражающиеся по часовой стрелке?\",\r\n    variants: [\"Венера и Нептун\", \"Уран и Меркурий\", \"Меркурий и Сатурн\", \"Венера и Уран\"],\r\n  },\r\n  {\r\n    question: \"Спутником какой планеты является Европа?\",\r\n    variants: [\"Марс\", \"Нептун\", \"Сатурн\", \"Юпитер\"],\r\n  },\r\n  {\r\n    question: \"Преобладающий элемент в составе Солнца?\",\r\n    variants: [\"Гелий\", \"Кислород\", \"Водород\", \"Железо\"],\r\n  },\r\n  {\r\n    question: \"Возраст земли?\",\r\n    variants: [\"4.5 миллиарда лет\", \"9 миллиарда лет\", \"7 тысяч лет\", \"230 миллионов лет\"],\r\n  },\r\n];\r\n\r\nconst CORRECT_ANSWER = [2,1,2,0,0,2,3,3,2,0];\r\n\r\nconst RESULT = {\r\n  '100': 'Великолепно.',\r\n  '80': 'Очень хорошо, продолжай в таком же духе.',\r\n  '60': 'Вы бы могли лучше. Старайтесь и у вас все получится.',\r\n  '40': 'Вам следует подучить материал.',\r\n  '20': 'Ужасно.',\r\n  '0': 'Хочется верить, что вы случайно нажали проверить.',\r\n}\r\n\r\nfunction Question(props) {\r\n  let i = props.item;\r\n  return (\r\n    <div className=\"questions__item\">\r\n      <h3>{i.question}</h3>\r\n      {i.variants.map(function(item, index) {\r\n        return (\r\n          <label key={index} className={props.disabled ? 'disabled' : false}>\r\n              <input type=\"radio\" value={index} name={`question#${props.index}`} \r\n                checked={index === props.checked ? true : false } disabled={props.disabled ? true : false} onChange={() => props.callback(index)} />\r\n              {item}\r\n          </label>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nclass Questions extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isChecked: false,\r\n      answers: Array(CORRECT_ANSWER.length).fill(0)\r\n    };\r\n  }\r\n\r\n  changeArrAnswer = (index, value) => {\r\n    let arr = this.state.answers.concat();\r\n    arr[index] = value;\r\n    this.setState({\r\n      answers: arr\r\n    });\r\n  }\r\n\r\n  checkAllAnswers = () => {\r\n    if(this.state.isChecked) {\r\n      this.setState({\r\n        isChecked: false,\r\n        answers: Array(CORRECT_ANSWER.length).fill(0)\r\n      })\r\n    } else {\r\n      this.setState({\r\n        isChecked: true\r\n      });\r\n    }\r\n  }\r\n\r\n  /*** check one answer and output div with correct and your answer ***/\r\n  checkAnswer = (correctAnswer, yourAnswer, index) => {\r\n    let elem;\r\n    if (correctAnswer === yourAnswer) {\r\n      elem = (<div className=\"correct\">Правильно</div>);\r\n    } else {\r\n      elem = (<div className=\"incorrect\">Правильный ответ \"{QUESTIONS[index].variants[correctAnswer]}\". Ваш ответ \"{QUESTIONS[index].variants[yourAnswer]}\".</div>);\r\n    }\r\n    return elem;\r\n  }\r\n\r\n  render() {\r\n    let questionElems;\r\n    let func = this.changeArrAnswer;\r\n    let answers = this.state.answers;\r\n    let show = this.state.isChecked;\r\n    let checkAnswer = this.checkAnswer;\r\n    let countCorrectAnswers = 0;\r\n\r\n    questionElems = QUESTIONS.map(function(item, index) {\r\n      let elemCheck;\r\n      if(show) {\r\n        elemCheck = checkAnswer(CORRECT_ANSWER[index], answers[index], index);\r\n      }\r\n\r\n      return (\r\n        <div className=\"questions__wrap\" key={index}>\r\n          <Question item={item} index={index} callback={value => func(index, value)} checked={answers[index]} disabled={show}/>\r\n          {show ? elemCheck : false}\r\n        </div>\r\n      );\r\n    })\r\n\r\n    /***count correct answers***/\r\n    if(show) {\r\n      for(let i = 0; i < CORRECT_ANSWER.length; i++) {\r\n        if(CORRECT_ANSWER[i] === answers[i]) countCorrectAnswers++;\r\n      }\r\n\r\n      let percent = countCorrectAnswers/CORRECT_ANSWER.length;\r\n      let resultClass;\r\n\r\n      for(let key in RESULT) {\r\n        if(percent*100 >= key) {\r\n          if(percent*100 < 21) resultClass = 'result verybad';\r\n          else if(percent*100 < 41) resultClass = 'result bad';\r\n          else if(percent*100 < 61) resultClass = 'result normal';\r\n          else if(percent*100 < 81) resultClass = 'result good';\r\n          else resultClass = 'result excellent';\r\n          var elemResult = (<div className={resultClass}>{RESULT[key]} {countCorrectAnswers} правильный ответов из {CORRECT_ANSWER.length}.</div>);\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <h1 className=\"questions__header\">Ответьте пожалуйста на вопросы ниже</h1>\r\n        {questionElems}\r\n        <input className=\"questions__button\" type=\"button\" value={this.state.isChecked ? 'Сброс' : 'Проверить'} onClick={this.checkAllAnswers} />\r\n        {show ? elemResult : false}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <Questions />,\r\n  document.getElementsByClassName('questions')[0]\r\n);\r\n"],"sourceRoot":""}